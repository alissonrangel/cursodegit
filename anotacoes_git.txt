
Aula 10
MacBook-Pro-de-Alisson:git alissoncarvalho$ git config --global core.editor vi

comando para desfazer o git add em um arquivo especifico - unstage
git rm --cached ./teste/exercicioaula12.txt

Aula 11 Estado dos arquivos no git:
Não monitorado - untracked
Modificado - modified
Preparado - staged - added
Consolidado - commit

Aula 15 - navegando historico dos commits

git checkout <commit> <file>
Volta para o estado de um commit específico, sem permissão 
para alterações.
Vc pode a partir dele criar uma nova branch
git checkout -b <new-branch-name>

git checkout master -> para voltar para a branch master

Aula 16 - desfazendo com checkout
git checkout -- <path or file or .> 
irá desfazer todas as alterações que não estejam
no Stage desde o último commit, ou seja, antes de
executar o git add

git checkout HEAD -- <path or file or .>
irá desfazer todas as alterações, incluindo
o Stage, desde o último commit, até antes de dar o
commit e depois de já ter dado o git add

Aula 14 - git clone e git pull
git clone <url>

git pull # puxa as alterações do repositorio remoto


Obs.: Desfaz as mudanças de um arquifo modified
git restore pratica_um/pessoas.txt

Aula 15 - Navegando no histórico

git checkout <commit> <file>

git checkout <codigo do commit> # vai para este commit

Você vai para um o estágio: "detached HEAD"
Assim vc pode verificar se na época deste commit
tinha algum bug

não posso fazer commits neste estágio
para fazer commits, pode criar uma branch nova para isso

git checkout master # volta para o ultimo commit

Aula 16 - desfazendo com checkout

# desfaz as alterações de um arquivo modified (ainda não no stage)
git checkout -- <path or file> or git restore * 

# se estiver no stage 
git restore --staged <file>..." to unstage

# desfaz deste o ultimo commit
git checkout HEAD -- <path_file>

Aula 17 - desfazendo com revert e reset

git revert <commit>
desfaz o último commit criando um novo

git reset <commit>
apaga os commits

git reset --hard <commit>
resetar um repositario para um determinado commit
não usa se já estiver no github

git reset HEAD~1 -> volta um commit, e deixa
em status modified, ou seja, no momento após a última 
alteração commitada, após a alteração e antes de
fazer o git add

git reset HEAD~1 --hard -> apaga o commit e volta
para o estado do commit anterior, antes das alteracoes
feitas no commit anterior 

git reset --soft <commit>
resetar um repositario para um determinado commit,
antes de se fazer o git add deste commit, fica
após as suas alterações

git diff <commit_a> <commit_b> -> mostra as diferencas
entre dois commits


Aula 18 - conflitos
o git identifica os conflitos
e após resolver, faz-se um commit

Aula 19 - exercicio de conflitos
Quando dou um pull e tem conflito, 
automaticamente o meu arquivo é alterado
mostrando as alterações.
<<<<< - mostra a minha
>>>>> - mostra a de outra pessoa
então eu tenho que apagar as marcações
e salvar o resultado.

Aula 20 - resolvendo conflito com merge

Aula 21 - Visualizando historico numa interface grafica
do github e interface grafica gitEye
programa - gitEye
ver os diffs, faz add, commit em arqvos
especificos

Aula 22 - Branching
criando ramificações do repositório

git branch # mostra as branchs

para criar uma branch
git branch <nova_branch>

para excluir uma branch
git branch -d <branch>

para mudar de branch
git checkout <branch>

# para fazer o upload de uma nova branch no github
git push --set-upstream origin novaBranch_2021_1
git push -u origin novaBranch_2021_1

Aula 23 - Exercício 4 - de branch

para adicionar uma nova branch no repositorio do git hub
git push --set-upstream origin novaBranch
git push -u origin novaBranch

Aula 24 - git merge e exercício

para colocar as modificações de uma branch na branch atual
na branch master, dou o comando:
git merge novaBranch
git merge <branch>

Aula 25 - git Rebase

git rebase <branch>
semelhante ao merge, mas na historia fica uma linha reta
adiciona os commits da novaBranch após o commit base da
branch master, e os commits, após o commit base da master, da branch master,
são adicionados apos aqueles um a um

Aula 26 - Exercício de rebase
-por fazer

Aula 27 - git fetch
pull = fetch + merge

fetch + rebase

Aula 28 - tag
util para definir versões estáveis do projeto
git tag <nome da tag>
git push <remote> <tag>


Aula 29

Aula 30 - Interfaces gráficas

Aula 31 - GitHub e colaboração com Open Source

Aula 32 - fork e issues

Aula 33 - 

Aula 34 - Projeto Final

Aula 35 -

Aula 37 - Git ignore

Aula 38 - git commit --amend
Altera o ultimo commit
    mensagem de commit
    adiciona arquivos

Aula 39 - git stash